apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'project-reports'

group = 'net.sf.katta'
version = '0.7'
sourceCompatibility = 1.6



// Modify these values if you want to build against different versions of Hadoop
project.ext.set("hadoop_version", "0.20.2")
project.ext.set("lucene_version", "3.5.0")

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'maven'
	apply plugin: 'signing'
	apply plugin: 'project-reports'

	// do not compile against transitives
	configurations { compile.transitive = false }

	repositories { mavenCentral() }

	dependencies {
		compile 'commons-cli:commons-cli:1.2'
		compile 'commons-math:commons-math:1.2'
		compile 'com.101tec:zkclient:0.2'
		compile 'com.google.guava:guava:11.0.1'
		compile 'com.google.code.typica:typica:1.5.2a'
		compile 'com.jcraft:jsch:0.1.49'
		compile 'log4j:log4j:1.2.17'
		compile 'org.apache.hadoop:hadoop-core:' + hadoop_version
		compile 'org.apache.lucene:lucene-core:' + lucene_version
		compile 'org.apache.zookeeper:zookeeper:3.3.1'
		compile 'org.mortbay.jetty:jetty:6.1.26'
		compile 'org.mortbay.jetty:jetty-util:6.1.26'
		testCompile 'junit:junit:4.8.2'
		testCompile 'org.apache.hadoop:hadoop-test:' + hadoop_version
		testCompile 'org.easytesting:fest-assert:1.4'
		testCompile 'org.hamcrest:hamcrest-library:1.3'
		testCompile 'org.mockito:mockito-core:1.8.1'
	}

	version = '0.7'

	// charset of Java code
	compileJava.options.encoding = 'UTF-8'

	jar { manifest.attributes provider: 'gradle' }

	// Enable the test report for the individual test task
	test { testReport = true }

	// copy Eclipse JDT code formatting settings
	task eclipseJdtPrepare(type: Copy) {
		from rootProject.file('src/build/eclipse')
		into project.file('.settings/')
		include '*.prefs'
	}
	tasks["eclipseJdt"].dependsOn(eclipseJdtPrepare)

}

allprojects { apply from: new File('jacoco-multiproject-aggregator.gradle').getAbsolutePath() }



//--------------------
// Eclipse Setup
//--------------------
eclipse {
	classpath { defaultOutputDir = file('build-eclipse') }
}

task eclipseJdtPrepare(type: Copy) {
	from rootProject.file('src/build/eclipse/*.prefs')
	into project.file('.settings/')
}
tasks["eclipseJdt"].dependsOn(eclipseJdtPrepare)



//--------------------
// Maven Artifact publishing
//--------------------

signing {
	required { gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}

uploadArchives {

	repositories.mavenDeployer {
		repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
			authentication(userName: sonatypeUsername, password: sonatypePassword)
		}
		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
		pom.project {
			name 'Katta'
			packaging 'jar'
			description 'Katta is a scalable, failure tolerant, distributed, data storage for real time access. Katta serves large, replicated, indices as shards to serve high loads and very large data sets. These indices can be of different type. Currently implementations are available for Lucene and Hadoop mapfiles.'
			url 'http://katta.sourceforge.net/'
			licenses {
				license {
					name 'The Apache Software License, Version 2.0'
					url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					distribution 'repo'
				}
			}
			scm {
				url 'https://github.com/sgroschupf/katta'
				connection 'scm:git:git://github.com/sgroschupf/katta.git'
				developerConnection 'scm:git:https://github.com/sgroschupf/katta.git'
			}
			developers {
				developer {
					id 'sgroschupf'
					name 'Stefan Groshupf'
				}
				developer {
					id 'pvoss'
					name 'Peter Voss'
				}
				developer {
					id 'jzillmann'
					name 'Johannes Zillmann'
				}
			}
		}
	}
}



//--------------------
// Util methods
//--------------------
task wrapper(type: Wrapper, description: 'Generate the Gradle Wrapper') { gradleVersion = '1.4' }
